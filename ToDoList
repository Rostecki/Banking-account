from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, Date
from datetime import datetime, timedelta
from sqlalchemy.orm import sessionmaker

""" this is a program for making and updating ToDo list with use of SQLAlchemy"""

engine = create_engine('sqlite:///todo.db?check_same_thread=False')
Base = declarative_base()
Session = sessionmaker(bind=engine)
session = Session()


class Table(Base):
    __tablename__ = 'task'
    id = Column(Integer, primary_key=True)
    task = Column(String, default='default_value')
    deadline = Column(Date, default=datetime.today())

    def __repr__(self):
        return self.id, self.task


Base.metadata.create_all(engine)


def menu():
    print("\n1) Today's tasks\n2) Week's tasks\n3) All tasks\n4) Missed tasks\n5) Add task\n6) Delete task\n0) Exit")
    choice = int(input())
    return choice


def today_tasks():
    today = datetime.today()
    rows = session.query(Table).filter(Table.deadline == today.date()).all()
    # rows = session.query(Table).all()
    if not rows:
        print(f"\nToday {datetime.strftime(today, '%d %b')}:\nNothing to do!")
    else:
        print(f"Today {datetime.strftime(today, '%d %b')}:")
        for row in rows:
            print(f"{row.id}. {row.task}")


def add_task():
    new_task = input("Enter task\n")
    new_deadline = input("Enter deadline\n")
    dt = datetime.strptime(new_deadline, "%Y-%m-%d")
    new_row = Table(task=new_task, deadline=dt)
    session.add(new_row)
    session.commit()
    print("The task has been added!")


def all_tasks():
    # select all rows ordered by the date column
    rows = session.query(Table).order_by(Table.deadline).all()
    if not rows:
        print("Nothing to do!\n")
    else:
        counter = 1
        for row in rows:
            print(f"{counter}. {row.task}. {datetime.strftime(row.deadline, '%#d %b')}")
            counter += 1


def week_tasks():
    rows = session.query(Table).order_by(Table.deadline).all()
    today = datetime.today().date()
    for i in range(0, 7):
        next_day = today + timedelta(days=i)
        counter_2 = 1
        print()
        print(datetime.strftime(next_day, '%A %d %b'))
        for row in rows:
            if next_day == row.deadline:
                print(f"{counter_2}. {row.task}")
                counter_2 += 1
        if counter_2 == 1:
            print("Nothing to do!")


def missed_tasks():
    rows = session.query(Table).filter(Table.deadline < datetime.today().date()).all()
    print("Missed tasks:")
    if not rows:
        print("Nothing is missed!")
    else:
        for row in rows:
            print(f"{row.id}. {row.task}. {datetime.strftime(row.deadline, '%#d %b')}")

def delete_task():
    # delete a specific row
    rows = session.query(Table).all()
    print("Choose the number of the task you want to delete:")
    if not rows:
        print("There is nothing to delete!")
    else:
        for row in rows:
            print(f"{row.id}. {row.task}. {datetime.strftime(row.deadline, '%#d %b')}")
        row_to_delete = int(input())
        session.delete(rows[row_to_delete - 1])
        session.commit()
        print("The task has been deleted!")

# main program
while True:
    choice = menu()
    if choice == 1:
        today_tasks()
    elif choice == 2:
        week_tasks()
    elif choice == 3:
        all_tasks()
    elif choice == 4:
        missed_tasks()
    elif choice == 5:
        add_task()
    elif choice == 6:
        delete_task()
    elif choice == 0:
        print("\nBye!")
        break
